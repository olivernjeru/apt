<head>
  <style>
       .status-red {
           background-color: #ff4d4d !important;
           color: white;
       }

       .status-yellow {
           background-color: #ffcc00 !important;
           color: black;
       }

       .status-green {
           background-color: #28a745 !important;
           color: white;
       }

       .status-orange {
           background-color: #f19b3f !important;
           color: white;
       }

       .status-dropdown {
           width: 200px;
       }

       .status-cell[colspan="2"] {
           text-align: center;
           font-size: 20px;
           font-weight: bold;
       }

       .pending-text {
           font-size: 1.2rem; 
           font-weight: bold;
           text-align: center;
           vertical-align: middle !important; 
       }

       .floor-filter,
       .status-filter {
           width: 200px;
       }
  </style>
</head>

<body>
    <div class="container-fluid">
        <button class="btn hb-btn-primary mb-3 update-all-btn">Update All</button>

        <div style="max-height: 85vh; overflow-y: auto;">
            {{#if error}}
            <div class="alert alert-danger text-center">{{error}}</div>
            {{/if}}

            <table class="table table-striped hb-table">
                <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
                    <tr>
                        <th>Rooms
                            <select id="floorFilter" class="form-select form-select-sm floor-filter"
                                style="width: auto; display: inline-block; margin-left: 5px;">
                                <option value="all">All Floors</option>
                            </select>
                        </th>
                        <th>Status
                            <select id="statusFilter" class="form-select form-select-sm status-filter"
                                style="width: auto; display: inline-block; margin-left: 5px;">
                                <option value="all">All Statuses</option>
                                <option value="Needs Cleaning">Needs Cleaning</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Cleaned">Cleaned</option>
                                <option value="Pending">Pending</option> <!-- Added this -->

                            </select>
                        </th>
                        <th>Assign Cleaner</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each rooms}}
                    <tr data-floor="{{this.floor}}" data-status="{{this.cleaningStatus}}">
                        <td>{{this.roomNumber}}</td>

                        {{#if (eq this.cleaningStatus "Pending")}}
                            <!-- Merged Cell for Pending -->
                            <td class="status-cell status-orange text-center" colspan="2" style="font-size: 18px; font-weight: bold;">
                                Pending
                            </td>
                        {{else}}
                            <!-- Status Dropdown -->
                            <td class="status-cell
                                {{#if (eq this.cleaningStatus 'Needs Cleaning')}}status-red{{/if}}
                                {{#if (eq this.cleaningStatus 'In Progress')}}status-yellow{{/if}}
                                {{#if (eq this.cleaningStatus 'Cleaned')}}status-green{{/if}}">
                                <select class="form-select status-dropdown" id="status-{{this.roomNumber}}" data-room="{{this.roomNumber}}">
                                    <option value="Needs Cleaning" class="status-red" {{#if (eq this.cleaningStatus "Needs Cleaning" )}}selected{{/if}}>
                                        Needs Cleaning
                                    </option>
                                    <option value="In Progress" class="status-yellow" {{#if (eq this.cleaningStatus "In Progress" )}}selected{{/if}}>
                                        In Progress
                                    </option>
                                    <option value="Cleaned" class="status-green" {{#if (eq this.cleaningStatus "Cleaned" )}}selected{{/if}}>
                                        Cleaned
                                    </option>
                                </select>
                            </td>

                            <!-- Assign Cleaner Dropdown -->
                            <td>
                                <select class="form-select cleaner-dropdown" id="cleaner-{{this.roomNumber}}" data-room="{{this.roomNumber}}">
                                    <option value="">Select Cleaner</option>
                                    {{#each ../cleaners}}
                                    <option value="{{this.id}}" {{#if (eq this.id ../assignedCleaner)}}selected{{/if}}>
                                        {{this.name}}
                                    </option>
                                    {{/each}}
                                </select>
                            </td>
                        {{/if}}
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>

        <!-- Bootstrap Toast Notification -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="updateToast" class="toast" role="alert">
                <div class="toast-header">
                    <strong class="me-auto">Update Status</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                </div>
                <div class="toast-body"></div>
            </div>
        </div>

        <script>
        document.querySelector(".update-all-btn").addEventListener("click", function () {
            const updatedRooms = [];

            document.querySelectorAll("tbody tr").forEach(row => {
                const roomNumber = row.querySelector("td:first-child").textContent; // Get room number from the first column
                const statusCell = row.querySelector(".status-cell"); // Find the status cell in the row

                // Skip rows with merged "Pending" status
                if (statusCell && statusCell.getAttribute("colspan") == "2") {
                    return; // Skip pending rooms that are merged
                }

                const statusDropdown = row.querySelector(".status-dropdown");
                const cleanerDropdown = row.querySelector(".cleaner-dropdown");

                const cleaningStatus = statusDropdown ? statusDropdown.value : null;  // Null if no status dropdown
                const cleaner = cleanerDropdown ? cleanerDropdown.value : null;  // Null if no cleaner dropdown

                updatedRooms.push({ roomNumber, cleaningStatus, cleaner });
            });

            console.log("Sending batch update:", updatedRooms);

            fetch("/housekeeping/update-rooms", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ rooms: updatedRooms })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("All rooms updated successfully!");
                    } else {
                        alert("Error updating rooms: " + data.message);
                    }
                })
                .catch(error => console.error("Fetch error:", error));
        });

            // Status dropdown color change functionality
            document.querySelectorAll(".status-dropdown").forEach(select => {
                select.addEventListener("change", function () {
                    const cell = this.closest("td");
                    cell.classList.remove("status-red", "status-yellow", "status-green");

                    if (this.value === "Needs Cleaning") {
                        cell.classList.add("status-red");
                    } else if (this.value === "In Progress") {
                        cell.classList.add("status-yellow");
                    } else if (this.value === "Cleaned") {
                        cell.classList.add("status-green");
                    }
                });
            });

            // Floor Filter functionality
            // Dynamically populate floor filter options based on the data-floor attributes in table rows
            function populateFloorFilter() {
                const floorFilter = document.getElementById("floorFilter");
                const rows = document.querySelectorAll("tbody tr");
                const floorSet = new Set();

                // Collect unique floor values
                rows.forEach(row => {
                    const floor = row.getAttribute("data-floor");
                    if (floor) {
                        floorSet.add(floor);
                    }
                });

                // Convert to an array and sort numerically
                const floors = Array.from(floorSet).sort((a, b) => a - b);

                // Append an option for each unique floor
                floors.forEach(floor => {
                    const option = document.createElement("option");
                    option.value = floor;
                    option.textContent = `Floor ${floor}`;
                    floorFilter.appendChild(option);
                });
            }

            populateFloorFilter();

            // Floor Filter change event
            document.getElementById("floorFilter").addEventListener("change", function () {
                const selectedFloor = this.value;
                const selectedStatus = document.getElementById("statusFilter").value;

                document.querySelectorAll("tbody tr").forEach(row => {
                    const roomFloor = row.getAttribute("data-floor");
                    const roomStatus = row.getAttribute("data-status");

                    const floorMatch = selectedFloor === "all" || roomFloor === selectedFloor;
                    const statusMatch = selectedStatus === "all" || roomStatus === selectedStatus;

                    if (floorMatch && statusMatch) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                });
            });

            // Status Filter change event
            document.getElementById("statusFilter").addEventListener("change", function () {
                const selectedStatus = this.value;
                const selectedFloor = document.getElementById("floorFilter").value;

                document.querySelectorAll("tbody tr").forEach(row => {
                    const roomStatus = row.getAttribute("data-status");
                    const roomFloor = row.getAttribute("data-floor");

                    const statusMatch = selectedStatus === "all" || roomStatus === selectedStatus;
                    const floorMatch = selectedFloor === "all" || roomFloor === selectedFloor;

                    if (statusMatch && floorMatch) {
                        row.style.display = "";
                    } else {
                        row.style.display = "none";
                    }
                });
            });
        </script>
    </div>
</body>